generator client {
    provider = "prisma-client-js"
}

generator tsed {
    provider = "tsed-prisma"
}

generator erd {
    provider                  = "prisma-erd-generator"
    output                    = "../docs/ERD.svg"
    includeRelationFromFields = true
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model File {
    id                  String             @id @default(uuid())
    submitter           User?              @relation(references: [id], fields: [submitterId])
    submitterId         String?
    submittedAt         DateTime           @default(now())
    path                String
    type                FileType
    md5                 String
    transcription       String?
    CheckableResource   CheckableResource? @relation(fields: [checkableResourceId], references: [id])
    checkableResourceId String?
    ResourceTikTok      ResourceTikTok?
}

model CheckableResource {
    id                       String               @id @default(uuid())
    submitter                User?                @relation(references: [id], fields: [submitterId])
    submitterId              String?
    originalUrl              String?
    screenshots              File[]
    description              String?
    claim                    Claim                @relation(fields: [claimId], references: [id])
    claimId                  String
    type                     ResourceType
    ResourceTikTok           ResourceTikTok?
    ResourceTwitter          ResourceTwitter?
    firstResourceSimilarity  ResourceSimilarity[] @relation("firstResourceSimilarity")
    secondResourceSimilarity ResourceSimilarity[] @relation("secondResourceSimilarity")
}

model ResourceTikTok {
    parentResource   CheckableResource @relation(fields: [parentResourceId], references: [id])
    parentResourceId String            @id
    videoFile        File              @relation(fields: [fileId], references: [id])
    fileId           String            @unique
    poster           String
    likes            Int
    bookmarks        Int
    shares           Int
}

model ResourceTwitter {
    parentResource   CheckableResource @relation(fields: [parentResourceId], references: [id])
    parentResourceId String            @id
    tweetText        String
    poster           String
    retweets         Int
}

model ResourceSimilarity {
    firstResource       CheckableResource @relation("firstResourceSimilarity", fields: [firstResourceId], references: [id])
    firstResourceId     String
    secondResource      CheckableResource @relation("secondResourceSimilarity", fields: [secondResourceId], references: [id])
    secondResourceId    String
    similarityScore     Float
    manuallyConfirmed   Boolean
    manuallyConfirmedBy User?             @relation(references: [id], fields: [confirmerId])
    confirmerId         String?
    manuallyConfirmedAt DateTime?

    @@id([firstResourceId, secondResourceId])
}

model Claim {
    id                String              @id @default(uuid())
    submitter         User?               @relation(references: [id], fields: [submitterId])
    submitterId       String?
    submittedAt       DateTime            @default(now())
    tags              String[]
    CheckableResource CheckableResource[]
}

model User {
    id                         String               @id @default(uuid())
    submittedFiles             File[]
    submittedCheckableResource CheckableResource[]
    submittedClaims            Claim[]
    ResourceSimilarity         ResourceSimilarity[]
    email                      String               @unique
    password                   String
    role                       UserRole             @default(USER)
    sessions                   Session[] // This is the reverse relation field
    createdAt                  DateTime             @default(now())
    updatedAt                  DateTime             @updatedAt
}

model Session {
    id        String   @id @default(uuid())
    token     String   @unique
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    expiresAt DateTime
    userAgent String? // Optional: store user-agent string for reference
}

enum UserRole {
    ADMIN
    USER
}

enum FileType {
    IMAGE
    VIDEO
    DOCUMENT
    OTHER
}

enum ResourceType {
    TIKTOK
    TWITTER
    OTHER
}
