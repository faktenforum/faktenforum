generator client {
  provider = "prisma-client-js"
}

generator tsed {
  provider = "tsed-prisma"
}

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "../docs/ERD.svg"
  includeRelationFromFields = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Claim {
  id                 String              @id @default(uuid())
  type               ClaimSubmissionType
  createdAt          DateTime            @default(now())
  resources          Resource[]
  origin             String?
  UserSubmittedClaim UserSubmittedClaim?
  AnonymousClaim     AnonymousClaim?
  FactCheck          FactCheck[]
}

model UserSubmittedClaim {
  Claim       Claim  @relation(fields: [claimId], references: [id])
  claimId     String @id
  submitter   User   @relation(references: [id], fields: [submitterId])
  submitterId String
}

// TODO: Track information about anonymous claims, e.g. IP address
model AnonymousClaim {
  claim   Claim  @relation(fields: [claimId], references: [id])
  claimId String @id
}

model User {
  id              String               @id @default(uuid())
  submittedClaims UserSubmittedClaim[]
}

model FactCheck {
  id      String          @id @default(uuid())
  status  FactCheckStatus
  claim   Claim           @relation(references: [id], fields: [claimId])
  claimId String
}

model Resource {
  id                         String               @id @default(uuid())
  claim                      Claim                @relation(references: [id], fields: [claimId])
  claimId                    String
  type                       ResourceType
  createdAt                  DateTime             @default(now())
  source                     String
  metadata                   Json
  firstResourceSimilarities  ResourceSimilarity[] @relation("firstResourceSimilarity")
  secondResourceSimilarities ResourceSimilarity[] @relation("secondResourceSimilarity")
  files                      File[]
}

model ResourceSimilarity {
  firstResource    Resource @relation("firstResourceSimilarity", fields: [firstResourceId], references: [id])
  firstResourceId  String
  secondResource   Resource @relation("secondResourceSimilarity", fields: [secondResourceId], references: [id])
  secondResourceId String
  similarityScore  Float

  @@id([firstResourceId, secondResourceId])
}

model File {
  id         String   @id @default(uuid())
  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId String
  path       String
}

enum ResourceType {
  IMAGE
  LINK
}

enum FactCheckStatus {
  IN_PROGRESS
  DONE
}

enum ClaimSubmissionType {
  ANONYMOUS
  USER_SUBMITTED
}
