generator client {
    provider = "prisma-client-js"
}

generator tsed {
    provider = "tsed-prisma"
}

generator erd {
    provider                  = "prisma-erd-generator"
    output                    = "../docs/ERD.svg"
    includeRelationFromFields = true
}

generator erdPdf {
    provider                  = "prisma-erd-generator"
    output                    = "../docs/ERD.pdf"
    includeRelationFromFields = true
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model File {
    id              String         @id @default(uuid())
    submitter       User?          @relation(references: [id], fields: [submitterId])
    submitterId     String?
    submittedAt     DateTime       @default(now())
    path            String
    type            FileType
    md5             String
    transcription   String?
    ClaimResource   ClaimResource? @relation(fields: [ClaimResourceId], references: [id])
    ClaimResourceId String?
}

model ClaimResource {
    id                       String               @id @default(uuid())
    submitter                User?                @relation(references: [id], fields: [submitterId])
    submitterId              String?
    originalUrl              String?
    screenshots              File[]
    description              String?
    claim                    Claim                @relation(fields: [claimId], references: [id])
    claimId                  String
    firstResourceSimilarity  ResourceSimilarity[] @relation("firstResourceSimilarity")
    secondResourceSimilarity ResourceSimilarity[] @relation("secondResourceSimilarity")
}

model ResourceSimilarity {
    firstResource       ClaimResource @relation("firstResourceSimilarity", fields: [firstResourceId], references: [id])
    firstResourceId     String
    secondResource      ClaimResource @relation("secondResourceSimilarity", fields: [secondResourceId], references: [id])
    secondResourceId    String
    similarityScore     Float
    manuallyConfirmed   Boolean
    manuallyConfirmedBy User?         @relation(references: [id], fields: [confirmerId])
    confirmerId         String?
    manuallyConfirmedAt DateTime?

    @@id([firstResourceId, secondResourceId])
}

model Claim {
    id            String          @id @default(uuid())
    submitter     User?           @relation(references: [id], fields: [submitterId])
    submitterId   String?
    submittedAt   DateTime        @default(now())
    title         String?
    description   String?
    tags          String[]
    ClaimResource ClaimResource[]

    ClaimSubmitToken ClaimSubmissionToken[]
}

model ClaimSubmissionToken {
    id        String   @id @default(uuid())
    token     String   @unique
    claimId   String
    claim     Claim    @relation(fields: [claimId], references: [id])
    expiresAt DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id                     String               @id @default(uuid())
    submittedFiles         File[]
    submittedClaimResource ClaimResource[]
    submittedClaims        Claim[]
    ResourceSimilarity     ResourceSimilarity[]
    email                  String               @unique
    password               String
    role                   UserRole             @default(USER)
    sessions               Session[] // This is the reverse relation field
    createdAt              DateTime             @default(now())
    updatedAt              DateTime             @updatedAt
}

model Session {
    id        String    @id @default(uuid())
    token     String    @unique
    userId    String
    user      User      @relation(fields: [userId], references: [id])
    userAgent String? // Optional: store user-agent string for reference
    expiresAt DateTime
    lastLogin DateTime? @default(now())
    updatedAt DateTime  @updatedAt
    createdAt DateTime  @default(now())
}

enum UserRole {
    ADMIN
    USER
}

enum FileType {
    IMAGE
    VIDEO
    DOCUMENT
    OTHER
}
