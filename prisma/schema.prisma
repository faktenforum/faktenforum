generator client {
    provider = "prisma-client-js"
}

generator tsed {
    provider = "tsed-prisma"
}

generator erd {
    provider                  = "prisma-erd-generator"
    output                    = "../docs/ERD.svg"
    includeRelationFromFields = true
}

generator erdPdf {
    provider                  = "prisma-erd-generator"
    output                    = "../docs/ERD.pdf"
    includeRelationFromFields = false
}

datasource db {
    provider = "postgresql"
    url      = env("PRISMA_DATABASE_URL")
}

enum UserRole {
    ADMIN
    USER
}

enum FileType {
    IMAGE
    VIDEO
    DOCUMENT
    OTHER
}

enum ClaimLabel {
    FALSE
    MISSLEADING
    TRUE
}

enum ClaimStatus {
    SUBMITTED
    READYT_TO_CHECK
    IN_PROGRESS
    ARCHIVED
    SPAM
    CLOSED
    CHECKED
    PUBLISHED
}

model Claim {
    id               String                 @id @default(uuid()) @db.Uuid
    title            String?
    description      String?
    tags             String[]               @default([])
    label            ClaimLabel?
    status           ClaimStatus            @default(SUBMITTED)
    resources        ClaimResource[]
    claimSubmitToken ClaimSubmissionToken[]
    archiveId        String?                @db.Uuid
    archiveAt        DateTime?
    createdBy        String                 @db.Uuid
    updatedBy        String?                @db.Uuid
    creater          User                   @relation(name: "Creater", fields: [createdBy], references: [id])
    updater          User?                  @relation(name: "Updater", fields: [updatedBy], references: [id])
    comment          Comment[]
    Virality         Virality[]
    ClaimFact        ClaimFact[]
}

model ClaimResource {
    id          String  @id @default(uuid()) @db.Uuid
    originalUrl String?
    description String?
    fileId      String? @db.Uuid
    file        File?   @relation(fields: [fileId], references: [id])
    claimId     String  @db.Uuid
    claim       Claim   @relation(fields: [claimId], references: [id])
    createdBy   String  @db.Uuid
    updatedBy   String? @db.Uuid
    creater     User    @relation(name: "Creater", fields: [createdBy], references: [id])
    updater     User?   @relation(name: "Updater", fields: [updatedBy], references: [id])
}

model File {
    id            String          @id @default(uuid()) @db.Uuid
    key           String
    name          String
    mimeType      String
    md5           String
    size          Int
    transcription String?
    createdBy     String          @db.Uuid
    updatedBy     String?         @db.Uuid
    creater       User            @relation(name: "Creater", fields: [createdBy], references: [id])
    updater       User?           @relation(name: "Updater", fields: [updatedBy], references: [id])
    claimResource ClaimResource[]
    factResource  FactResource[]

    @@index([key])
}

model Fact {
    id          String         @id @default(uuid()) @db.Uuid
    title       String?
    description String?
    createdBy   String         @db.Uuid
    updatedBy   String?        @db.Uuid
    creater     User           @relation(name: "Creater", fields: [createdBy], references: [id])
    updater     User?          @relation(name: "Updater", fields: [updatedBy], references: [id])
    resources   FactResource[]
    ClaimFact   ClaimFact[]
}

model FactResource {
    id          String  @id @default(uuid()) @db.Uuid
    originalUrl String?
    description String?
    fileId      String? @db.Uuid
    file        File?   @relation(fields: [fileId], references: [id])
    factId      String  @db.Uuid
    fact        Fact    @relation(fields: [factId], references: [id])
    createdBy   String  @db.Uuid
    updatedBy   String? @db.Uuid
    creater     User    @relation(name: "Creater", fields: [createdBy], references: [id])
    updater     User?   @relation(name: "Updater", fields: [updatedBy], references: [id])
}

model ClaimFact {
    id        String  @id @default(uuid()) @db.Uuid
    claimId   String  @db.Uuid
    claim     Claim   @relation(fields: [claimId], references: [id])
    factId    String  @db.Uuid
    fact      Fact    @relation(fields: [factId], references: [id])
    createdBy String  @db.Uuid
    updatedBy String? @db.Uuid
    creater   User    @relation(name: "Creater", fields: [createdBy], references: [id])
    updater   User?   @relation(name: "Updater", fields: [updatedBy], references: [id])
}

model Comment {
    id        String  @id @default(uuid()) @db.Uuid
    claimId   String  @db.Uuid
    claim     Claim   @relation(fields: [claimId], references: [id])
    content   String
    createdBy String  @db.Uuid
    updatedBy String? @db.Uuid
    creater   User    @relation(name: "Creater", fields: [createdBy], references: [id])
    updater   User?   @relation(name: "Updater", fields: [updatedBy], references: [id])
}

model Virality {
    id              String @id @default(uuid()) @db.Uuid
    claimId         String @db.Uuid
    claim           Claim  @relation(fields: [claimId], references: [id])
    facebookLikes   Int?
    facebookShares  Int?
    youtubeViews    Int?
    youtubeLikes    Int?
    youtubeDislikes Int?
    instagramLikes  Int?
    instagramShares Int?
}

model ClaimSubmissionToken {
    id        String   @id @default(uuid()) @db.Uuid
    token     String   @unique
    claimId   String   @db.Uuid
    claim     Claim    @relation(fields: [claimId], references: [id])
    expiresAt DateTime
}

model User {
    id           String  @id @default(uuid()) @db.Uuid
    email        String  @unique
    username     String  @unique
    firstName    String?
    lastName     String?
    pronouns     String?
    profileImage String?
    bio          String?
    mobileNumber String?

    createdComments       Comment[]       @relation(name: "Creater")
    updatedComments       Comment[]       @relation(name: "Updater")
    createdClaims         Claim[]         @relation(name: "Creater")
    updatedClaims         Claim[]         @relation(name: "Updater")
    createdFacts          Fact[]          @relation(name: "Creater")
    updatedFacts          Fact[]          @relation(name: "Updater")
    createdClaimFacts     ClaimFact[]     @relation(name: "Creater")
    updatedClaimFacts     ClaimFact[]     @relation(name: "Updater")
    createdClaimResources ClaimResource[] @relation(name: "Creater")
    updatedClaimResources ClaimResource[] @relation(name: "Updater")
    createdFactResources  FactResource[]  @relation(name: "Creater")
    updatedFactResources  FactResource[]  @relation(name: "Updater")
    createdFiles          File[]          @relation(name: "Creater")
    updatedFiles          File[]          @relation(name: "Updater")
}
