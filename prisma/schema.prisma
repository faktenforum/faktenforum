generator client {
    provider = "prisma-client-js"
}

generator tsed {
    provider = "tsed-prisma"
}

generator erd {
    provider                  = "prisma-erd-generator"
    output                    = "../docs/ERD.svg"
    includeRelationFromFields = true
}

generator erdPdf {
    provider                  = "prisma-erd-generator"
    output                    = "../docs/ERD.pdf"
    includeRelationFromFields = false
}

datasource db {
    provider = "postgresql"
    url      = env("PRISMA_DATABASE_URL")
}

enum UserRole {
    ADMIN
    USER
}

enum FileType {
    IMAGE
    VIDEO
    DOCUMENT
    OTHER
}

enum ClaimLabel {
    FALSE
    MISSLEADING
    TRUE
}

enum ClaimStatus {
    SUBMITTED
    READYT_TO_CHECK
    IN_PROGRESS
    ARCHIVED
    SPAM
    CLOSED
    CHECKED
    PUBLISHED
}

model Claim {
    id               String                 @id @default(uuid())
    title            String?
    description      String?
    tags             String[]               @default([])
    label            ClaimLabel?
    status           ClaimStatus            @default(SUBMITTED)
    resources        ClaimResource[]
    claimSubmitToken ClaimSubmissionToken[]
    createdAt        DateTime               @default(now())
    updatedAt        DateTime               @updatedAt
    createdBy        String?
    user             User?                  @relation(fields: [createdBy], references: [id])
    comment          Comment[]
    Virality         Virality[]
    ClaimFact        ClaimFact[]
}

model ClaimResource {
    id          String    @id @default(uuid())
    originalUrl String?
    description String?
    fileId      String?
    file        File?     @relation(fields: [fileId], references: [id])
    claimId     String
    claim       Claim     @relation(fields: [claimId], references: [id])
    archiveId   String?
    archiveAt   DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    createdBy   String?
    user        User?     @relation(fields: [createdBy], references: [id])
}

model File {
    id            String          @id @default(uuid())
    key           String
    name          String
    mimeType      String
    md5           String
    size          Int
    transcription String?
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    createdBy     String?
    user          User?           @relation(fields: [createdBy], references: [id])
    claimResource ClaimResource[]
    factResource  FactResource[]

    @@index([key])
}

model Fact {
    id          String         @id @default(uuid())
    title       String?
    description String?
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt
    createdBy   String
    user        User           @relation(fields: [createdBy], references: [id])
    resources   FactResource[]
    ClaimFact   ClaimFact[]
}

model FactResource {
    id          String   @id @default(uuid())
    originalUrl String?
    description String?
    fileId      String?
    file        File?    @relation(fields: [fileId], references: [id])
    factId      String
    fact        Fact     @relation(fields: [factId], references: [id])
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   String
    user        User     @relation(fields: [createdBy], references: [id])
    claimId     String?
}

model ClaimFact {
    id        String   @id @default(uuid())
    claimId   String
    claim     Claim    @relation(fields: [claimId], references: [id])
    factId    String
    fact      Fact     @relation(fields: [factId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy String
    user      User     @relation(fields: [createdBy], references: [id])
}

model Comment {
    id        String   @id @default(uuid())
    claimId   String
    claim     Claim    @relation(fields: [claimId], references: [id])
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    createdBy String
    user      User     @relation(fields: [createdBy], references: [id])
}

model Virality {
    id              String   @id @default(uuid())
    claimId         String
    claim           Claim    @relation(fields: [claimId], references: [id])
    facebookLikes   Int?
    facebookShares  Int?
    youtubeViews    Int?
    youtubeLikes    Int?
    youtubeDislikes Int?
    instagramLikes  Int?
    instagramShares Int?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model ClaimSubmissionToken {
    id        String   @id @default(uuid())
    token     String   @unique
    claimId   String
    claim     Claim    @relation(fields: [claimId], references: [id])
    expiresAt DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id                     String          @id @default(uuid())
    email                  String          @unique
    username               String          @unique
    firstName              String?
    lastName               String?
    pronouns               String?
    profileImage           String?
    bio                    String?
    mobileNumber           String?
    createdAt              DateTime        @default(now())
    updatedAt              DateTime        @updatedAt
    submittedClaimResource ClaimResource[]
    submittedFiles         File[]
    submittedClaims        Claim[]
    fact                   Fact[]
    factResource           FactResource[]
    comment                Comment[]
    ClaimFact              ClaimFact[]
}
