generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model claim_history {
  id              String                    @db.Uuid
  short_id        String?
  process_id      BigInt?
  submitter_notes String?
  status          claim_status
  synopsis        String?
  rating_title    String?
  rating_summary  String?
  rating_label_id String?                   @db.Uuid
  created_by      String?                   @db.Uuid
  updated_by      String?                   @db.Uuid
  created_at      DateTime?                 @db.Timestamptz(6)
  updated_at      DateTime?                 @db.Timestamptz(6)
  sys_period      Unsupported("tstzrange")?
  history_id      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  claim           claim                     @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_claim_history")
}

model claim {
  id                          String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  short_id                    String?                     @unique @default(dbgenerated("generate_unique_claim_short_id()"))
  process_id                  BigInt?                     @unique(map: "claim_process_id")
  submitter_notes             String?
  status                      claim_status                @default(submitted)
  synopsis                    String?
  rating_title                String?
  rating_summary              String?
  rating_label_id             String?                     @db.Uuid
  created_by                  String?                     @db.Uuid
  updated_by                  String?                     @db.Uuid
  created_at                  DateTime?                   @default(now()) @db.Timestamptz(6)
  updated_at                  DateTime?                   @default(now()) @db.Timestamptz(6)
  sys_period                  Unsupported("tstzrange")?
  user_claim_created_byTouser user?                       @relation("claim_created_byTouser", fields: [created_by], references: [id])
  rating_label                rating_label?               @relation(fields: [rating_label_id], references: [id], onDelete: Cascade, map: "claim_rating_label_rating_label_id_fkey")
  user_claim_updated_byTouser user?                       @relation("claim_updated_byTouser", fields: [updated_by], references: [id])
  claim_category              claim_category[]
  claim_fact_index_tracker    claim_fact_index_tracker?
  claim_history               claim_history[]
  claim_origin_index_tracker  claim_origin_index_tracker?
  comment                     comment[]
  fact                        fact[]
  origin                      origin[]
}

model origin {
  id                           String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  claim_id                     String                    @db.Uuid
  index                        Int?
  url                          String?
  excerpt                      String?
  archive_url                  String?
  file_id                      String?                   @db.Uuid
  created_by                   String?                   @db.Uuid
  updated_by                   String?                   @db.Uuid
  created_at                   DateTime?                 @default(now()) @db.Timestamptz(6)
  updated_at                   DateTime?                 @default(now()) @db.Timestamptz(6)
  sys_period                   Unsupported("tstzrange")?
  claim                        claim                     @relation(fields: [claim_id], references: [id], onDelete: Cascade)
  user_origin_created_byTouser user?                     @relation("origin_created_byTouser", fields: [created_by], references: [id])
  file                         file?                     @relation(fields: [file_id], references: [id])
  user_origin_updated_byTouser user?                     @relation("origin_updated_byTouser", fields: [updated_by], references: [id])
  origin_history               origin_history[]
}

model origin_history {
  id          String                    @db.Uuid
  claim_id    String                    @db.Uuid
  index       Int?
  url         String?
  excerpt     String?
  archive_url String?
  file_id     String?                   @db.Uuid
  created_by  String?                   @db.Uuid
  updated_by  String?                   @db.Uuid
  created_at  DateTime?                 @db.Timestamptz(6)
  updated_at  DateTime?                 @db.Timestamptz(6)
  sys_period  Unsupported("tstzrange")?
  history_id  String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  origin      origin                    @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_origin_history")
}

model comment {
  id                            String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  claim_id                      String                    @db.Uuid
  content                       String
  created_by                    String                    @db.Uuid
  updated_by                    String?                   @db.Uuid
  created_at                    DateTime?                 @default(now()) @db.Timestamptz(6)
  updated_at                    DateTime?                 @default(now()) @db.Timestamptz(6)
  sys_period                    Unsupported("tstzrange")?
  claim                         claim                     @relation(fields: [claim_id], references: [id], onDelete: Cascade)
  user_comment_created_byTouser user                      @relation("comment_created_byTouser", fields: [created_by], references: [id], onDelete: Cascade)
  user_comment_updated_byTouser user?                     @relation("comment_updated_byTouser", fields: [updated_by], references: [id])
  comment_history               comment_history[]
}

model comment_history {
  id         String                    @db.Uuid
  claim_id   String                    @db.Uuid
  content    String
  created_by String                    @db.Uuid
  updated_by String?                   @db.Uuid
  created_at DateTime?                 @db.Timestamptz(6)
  updated_at DateTime?                 @db.Timestamptz(6)
  sys_period Unsupported("tstzrange")?
  history_id String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  comment    comment                   @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_comment_history")
}

model fact {
  id                         String                     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  claim_id                   String                     @db.Uuid
  index                      Int?
  text                       String?
  created_by                 String?                    @db.Uuid
  updated_by                 String?                    @db.Uuid
  created_at                 DateTime?                  @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime?                  @default(now()) @db.Timestamptz(6)
  sys_period                 Unsupported("tstzrange")?
  claim                      claim                      @relation(fields: [claim_id], references: [id], onDelete: Cascade)
  user_fact_created_byTouser user?                      @relation("fact_created_byTouser", fields: [created_by], references: [id])
  user_fact_updated_byTouser user?                      @relation("fact_updated_byTouser", fields: [updated_by], references: [id])
  fact_history               fact_history[]
  fact_source_index_tracker  fact_source_index_tracker?
  source                     source[]
}

model fact_history {
  id         String                    @db.Uuid
  claim_id   String                    @db.Uuid
  index      Int?
  text       String?
  created_by String?                   @db.Uuid
  updated_by String?                   @db.Uuid
  created_at DateTime?                 @db.Timestamptz(6)
  updated_at DateTime?                 @db.Timestamptz(6)
  sys_period Unsupported("tstzrange")?
  history_id String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fact       fact                      @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_fact_history")
}

model source {
  id                           String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fact_id                      String                    @db.Uuid
  index                        Int?
  original_url                 String?
  excerpt                      String?
  file_id                      String?                   @db.Uuid
  created_by                   String?                   @db.Uuid
  updated_by                   String?                   @db.Uuid
  created_at                   DateTime?                 @default(now()) @db.Timestamptz(6)
  updated_at                   DateTime?                 @default(now()) @db.Timestamptz(6)
  sys_period                   Unsupported("tstzrange")?
  user_source_created_byTouser user?                     @relation("source_created_byTouser", fields: [created_by], references: [id])
  fact                         fact                      @relation(fields: [fact_id], references: [id], onDelete: Cascade)
  file                         file?                     @relation(fields: [file_id], references: [id])
  user_source_updated_byTouser user?                     @relation("source_updated_byTouser", fields: [updated_by], references: [id])
  source_history               source_history[]
}

model source_history {
  id           String                    @db.Uuid
  fact_id      String                    @db.Uuid
  index        Int?
  original_url String?
  excerpt      String?
  file_id      String?                   @db.Uuid
  created_by   String?                   @db.Uuid
  updated_by   String?                   @db.Uuid
  created_at   DateTime?                 @db.Timestamptz(6)
  updated_at   DateTime?                 @db.Timestamptz(6)
  sys_period   Unsupported("tstzrange")?
  history_id   String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  source       source                    @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_source_history")
}

model file {
  id                         String                    @id @db.Uuid
  name                       String
  mime_type                  String
  e_tag                      String
  size                       Int
  transcription              String?
  created_by                 String?                   @db.Uuid
  updated_by                 String?                   @db.Uuid
  created_at                 DateTime?                 @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime?                 @default(now()) @db.Timestamptz(6)
  sys_period                 Unsupported("tstzrange")?
  user_file_created_byTouser user?                     @relation("file_created_byTouser", fields: [created_by], references: [id])
  user_file_updated_byTouser user?                     @relation("file_updated_byTouser", fields: [updated_by], references: [id])
  file_history               file_history[]
  origin                     origin[]
  source                     source[]
}

model file_history {
  id            String                    @db.Uuid
  name          String
  mime_type     String
  e_tag         String
  size          Int
  transcription String?
  created_by    String?                   @db.Uuid
  updated_by    String?                   @db.Uuid
  created_at    DateTime?                 @db.Timestamptz(6)
  updated_at    DateTime?                 @db.Timestamptz(6)
  sys_period    Unsupported("tstzrange")?
  history_id    String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  file          file                      @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_claim_history")
}

model user {
  id                                             String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                          String                    @unique
  username                                       String                    @unique
  first_name                                     String?
  last_name                                      String?
  pronouns                                       String?
  profile_image                                  String?
  bio                                            String?
  mobile_number                                  String?
  created_at                                     DateTime?                 @default(now()) @db.Timestamptz(6)
  updated_at                                     DateTime?                 @default(now()) @db.Timestamptz(6)
  sys_period                                     Unsupported("tstzrange")?
  claim_claim_created_byTouser                   claim[]                   @relation("claim_created_byTouser")
  claim_claim_updated_byTouser                   claim[]                   @relation("claim_updated_byTouser")
  claim_category_claim_category_created_byTouser claim_category[]          @relation("claim_category_created_byTouser")
  claim_category_claim_category_updated_byTouser claim_category[]          @relation("claim_category_updated_byTouser")
  comment_comment_created_byTouser               comment[]                 @relation("comment_created_byTouser")
  comment_comment_updated_byTouser               comment[]                 @relation("comment_updated_byTouser")
  fact_fact_created_byTouser                     fact[]                    @relation("fact_created_byTouser")
  fact_fact_updated_byTouser                     fact[]                    @relation("fact_updated_byTouser")
  file_file_created_byTouser                     file[]                    @relation("file_created_byTouser")
  file_file_updated_byTouser                     file[]                    @relation("file_updated_byTouser")
  origin_origin_created_byTouser                 origin[]                  @relation("origin_created_byTouser")
  origin_origin_updated_byTouser                 origin[]                  @relation("origin_updated_byTouser")
  source_source_created_byTouser                 source[]                  @relation("source_created_byTouser")
  source_source_updated_byTouser                 source[]                  @relation("source_updated_byTouser")
  user_history                                   user_history[]
}

model user_history {
  id            String                    @db.Uuid
  email         String
  username      String
  first_name    String?
  last_name     String?
  pronouns      String?
  profile_image String?
  bio           String?
  mobile_number String?
  created_at    DateTime?                 @db.Timestamptz(6)
  updated_at    DateTime?                 @db.Timestamptz(6)
  sys_period    Unsupported("tstzrange")?
  history_id    String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user          user                      @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_claim_history")
}

model category {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String?
  label_de       String?
  label_en       String?
  claim_category claim_category[]
}

model claim_category {
  id                                   String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  claim_id                             String                    @db.Uuid
  category_id                          String                    @db.Uuid
  created_by                           String?                   @db.Uuid
  updated_by                           String?                   @db.Uuid
  created_at                           DateTime?                 @default(now()) @db.Timestamptz(6)
  updated_at                           DateTime?                 @default(now()) @db.Timestamptz(6)
  sys_period                           Unsupported("tstzrange")?
  category                             category                  @relation(fields: [category_id], references: [id], onDelete: Cascade)
  claim                                claim                     @relation(fields: [claim_id], references: [id], onDelete: Cascade)
  user_claim_category_created_byTouser user?                     @relation("claim_category_created_byTouser", fields: [created_by], references: [id])
  user_claim_category_updated_byTouser user?                     @relation("claim_category_updated_byTouser", fields: [updated_by], references: [id])
}

model claim_fact_index_tracker {
  claim_id      String @id @db.Uuid
  current_index Int
  claim         claim  @relation(fields: [claim_id], references: [id], onDelete: Cascade)
}

model claim_origin_index_tracker {
  claim_id      String @id @db.Uuid
  current_index Int
  claim         claim  @relation(fields: [claim_id], references: [id], onDelete: Cascade)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model claim_process_id_tracker {
  current_index Int? @default(0)

  @@ignore
}

model fact_source_index_tracker {
  fact_id       String @id @db.Uuid
  current_index Int
  fact          fact   @relation(fields: [fact_id], references: [id], onDelete: Cascade)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model events {
  id           String        @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  claim_id     String?       @db.Uuid
  claim_status claim_status?
  user_id      String?       @db.Uuid
  action       String?
  table_name   String?
  created_at   DateTime?     @default(now()) @db.Timestamptz(6)
  entry_id     String?       @db.Uuid

  @@ignore
}

model rating_label {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String?
  label_de String?
  label_en String?
  claim    claim[]
}

enum claim_status {
  submitted
  accepted
  observed
  stale
  spam
  rejected
  checked
  published
}

enum user_role {
  admin
  moderator
  senior
  intermediate
  junior
}
