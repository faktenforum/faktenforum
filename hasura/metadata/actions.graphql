type Mutation {
  blockAccount(
    blockAccountRequestInput: BlockAccountRequestInput
  ): RequestSuccessResponse
}

type Mutation {
  blockRoomMessage(
    roomId: String!
    messageId: String!
  ): BlockRoomMessageOutput
}

type Mutation {
  deleteAccount(
    userId: uuid!
  ): SuccessInfo!
}

type Mutation {
  requestVerificationCode(
    email: String!
  ): SuccessInfo
}

type Mutation {
  sendMessageToCheckbotMessagePost(
    textPayloadInput: TextPayloadInput!
  ): CheckbotResponse
}

type Mutation {
  updateUserRole(
    userId: uuid!
    role: UserRole!
  ): UserWithRole!
}

type Mutation {
  verifiyUserAccount(
    userId: uuid!
  ): SuccessInfo
}

enum Language {
  en
  de
}

enum UserRole {
  aspirant
  junior
  senior
  moderator
  editor
  administrator
}

enum CheckbotResponseType {
  unknown
  factcheck
  learningmaterial
}

input SampleInput {
  username: String!
  password: String!
}

input TextPayloadInput {
  text: String!
}

input GetAccountRoleRequestInput {
  id: String!
}

input BlockAccountRequestInput {
  blocked: Boolean!
  blockedUntil: String
  userId: String!
}

type UserWithRole {
  id: String!
  username: String!
  email: String!
  role: UserRole!
  verified: Boolean!
  lang: Language!
}

type AccountDetailsResponse {
  id: String!
  role: UserRole!
  verified: Boolean!
  blocked: BlockedInfo
}

type SampleOutput {
  accessToken: String!
}

type BlockRoomMessageOutput {
  success: Boolean
}

type CheckbotResponse {
  data: [DataListItem]
  type: CheckbotResponseType!
}

type DataListItem {
  claim: String
  fileType: String
  label: String
  link: String
  summary: String
  url: String
}

type SuccessInfo {
  success: Boolean!
}

type GetUserRoleResponse {
  id: String!
  role: String!
}

type RequestSuccessResponse {
  success: Boolean!
}

type BlockedInfo {
  until: String
  timestamp: String!
}

