version: "3.5"
services:
  traefik:
    image: traefik:latest
    command:
      - "--api.insecure=true"
      - "--providers.docker=false"
      - "--providers.file.directory=/etc/traefik/dynamic_conf"
      - "--accesslog=true"
      - "--accesslog.fields.headers.defaultmode=keep"
      - "--accesslog.fields.headers.names.User-Agent=drop"
      - "--accesslog.fields.headers.names.Content-Type=drop"
      - "--entryPoints.web.address=:80"

    ports:
      - "8000:80"
      - "8181:8080" # The Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik/dynamic_conf:/etc/traefik/dynamic_conf"
      - "./traefik/logs:/logs"
    networks:
      - traefik-ingress
      - faktenforum
    extra_hosts:
      - "host.docker.internal:host-gateway"

  postgres-db:
    build:
      context: ./database
      dockerfile: Dockerfile.db-postgres
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}

    networks:
      - faktenforum

  graphql-engine:
    image: hasura/graphql-engine:v2.36.0-ce
    ports:
      - "8080:8080"
    restart: always
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-db:${POSTGRES_PORT}/hasura
      PGDATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-db:${POSTGRES_PORT}/faktenforum
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      HASURA_GRAPHQL_READ_ONLY_MODE: "false"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_SECRET}
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"athena":{"uri":"http://data-connector-agent:8081/api/v1/athena"},"mariadb":{"uri":"http://data-connector-agent:8081/api/v1/mariadb"},"mysql8":{"uri":"http://data-connector-agent:8081/api/v1/mysql"},"oracle":{"uri":"http://data-connector-agent:8081/api/v1/oracle"},"snowflake":{"uri":"http://data-connector-agent:8081/api/v1/snowflake"}}}}'
      HASURA_GRAPHQL_AUTH_HOOK: ${HASURA_GRAPHQL_AUTH_HOOK}
      HASURA_GRAPHQL_AUTH_HOOK_SEND_REQUEST_BODY: ${HASURA_GRAPHQL_AUTH_HOOK_SEND_REQUEST_BODY}

    depends_on:
      data-connector-agent:
        condition: service_healthy
    networks:
      - faktenforum
      - traefik-ingress
    extra_hosts:
      - "host.docker.internal:host-gateway"

  data-connector-agent:
    image: hasura/graphql-data-connector:v2.36.0
    restart: always
    depends_on:
      - postgres-db
    ports:
      - 8081:8081
    environment:
      QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
      ## https://quarkus.io/guides/opentelemetry#configuration-reference
      QUARKUS_OPENTELEMETRY_ENABLED: "false"
      ## QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/athena/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s
    networks:
      - faktenforum
  db-migrate:
    build:
      context: ./hasura
      dockerfile: Dockerfile.hasura-migrate
    depends_on:
      - postgres-db
      - graphql-engine
    environment:
      HASURA_ENDPOINT: "http://graphql-engine:8080"
      HASURA_ADMIN_SECRET: ${HASURA_ADMIN_SECRET}
      APPLY_METADATA: true
      APPLY_MIGRATIONS: true
    networks:
      - faktenforum
  mongodb: # Add a MongoDB instance
    image: mongo:latest # Use a minimal version of MongoDB
    ports:
      - "${MONGODB_PORT}:27017"
    volumes:
      - mongodb_data:/data/db # Store MongoDB data in a volume
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
    networks:
      - faktenforum
  mongodb-sh:
    image: ghcr.io/faktenforum/mongosb-sh:latest
    depends_on:
      - mongodb
    environment:
      MONGODB_ROOT_USER: ${MONGODB_ROOT_USER}
      MONGODB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
      MONGODB_AGENDA_USER: ${MONGODB_AGENDA_USER}
      MONGODB_AGENDA_PASSWORD: ${MONGODB_AGENDA_PASSWORD}
      MONGODB_AGENDA_DB: ${MONGODB_AGENDA_DB}
      MONGODB_HOST: ${MONGODB_HOST}
      MONGODB_PORT: ${MONGODB_PORT}

    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for MongoDB to be ready...' &&
      until mongosh --quiet -u ${MONGODB_ROOT_USER} -p ${MONGODB_ROOT_PASSWORD} --authenticationDatabase admin mongodb://mongodb:${MONGODB_PORT} --eval 'db.runCommand({ ping: 1 })'; do
        sleep 1
      done &&
      echo 'MongoDB is ready. Creating user and setting up database...' &&
      mongosh -u ${MONGODB_ROOT_USER} -p ${MONGODB_ROOT_PASSWORD} --authenticationDatabase admin mongodb://mongodb:${MONGODB_PORT} --eval '
        db = db.getSiblingDB(\"${MONGODB_AGENDA_DB}\");
        db.createUser({
          user: \"${MONGODB_AGENDA_USER}\",
          pwd: \"${MONGODB_AGENDA_PASSWORD}\",
          roles: [{ role: \"readWrite\", db: \"${MONGODB_AGENDA_DB}\" },
                  { role: \"dbOwner\", db: \"${MONGODB_AGENDA_DB}\" }]
        });
      '"
    networks:
      - faktenforum
  minio:
    image: minio/minio:latest
    ports:
      - "${MINIO_API_PORT}:${MINIO_API_PORT}"
      - "${MINIO_CONSOLE_PORT}:${MINIO_CONSOLE_PORT}"
    environment:
      MINIO_SERVER_PORT: ${MINIO_API_PORT}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":${MINIO_CONSOLE_PORT}"
    networks:
      - faktenforum
  # minio-client inits minio with a service account and a bucket
  minio-client:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for MinIO to be ready...' &&
      sleep 5 &&
      mc alias set myminio http://minio:${MINIO_API_PORT} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      mc admin user svcacct add  myminio ${MINIO_ROOT_USER} --access-key ${MINIO_ACCESS_KEY} --secret-key ${MINIO_SECRET_KEY} &&
      mc mb myminio/${MINIO_BUCKET_NAME} &&
      echo 'Service account and bucket created in MinIO'"
    networks:
      - faktenforum

  kratos-migrate:
    image: oryd/kratos:v1.1
    depends_on:
      - postgres-db
    environment:
      DSN: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-db:${POSTGRES_PORT}/kratos?sslmode=disable&max_conns=20&max_idle_conns=4

    volumes:
      - type: bind
        source: ./kratos/
        target: /etc/config/kratos
    command: -c /etc/config/kratos/kratos.yml migrate sql -e --yes
    restart: on-failure
    networks:
      - faktenforum
      - traefik-ingress
  kratos:
    image: oryd/kratos:v1.1
    depends_on:
      - kratos-migrate
    environment:
      DSN: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-db:${POSTGRES_PORT}/kratos?sslmode=disable&max_conns=20&max_idle_conns=4
      SELFSERVICE_FLOWS_REGISTRATION_AFTER_PASSWORD_HOOKS_0_CONFIG_AUTH_CONFIG_VALUE: ${KRATOS_API_KEY}
      SELFSERVICE_FLOWS_REGISTRATION_AFTER_PASSWORD_HOOKS_1_CONFIG_AUTH_CONFIG_VALUE: ${KRATOS_API_KEY}
      SECRETS_COOKIE: ${KRATOS_SECRETS_COOKIE}
      SECRETS_CIPHER: ${KRATOS_SECRETS_CIPHER}

    volumes:
      - type: bind
        source: ./kratos/
        target: /etc/config/kratos
    command: serve -c /etc/config/kratos/kratos.yml --dev --watch-courier
    ports:
      - "4433:4433" # public
      - "4434:4434" # admin
    restart: on-failure
    networks:
      - faktenforum
      - traefik-ingress
    extra_hosts:
      - "host.docker.internal:host-gateway"
  mailslurper:
    image: oryd/mailslurper:latest-smtps
    ports:
      - "4436:4436"
      - "4437:4437"
    networks:
      - faktenforum
      - traefik-ingress
volumes:
  db_data:
  minio_data:
  mailhog-data:
  mongodb_data:

networks:
  faktenforum:
    driver: bridge
  traefik-ingress:
    driver: bridge
